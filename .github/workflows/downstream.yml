name: IntegrationTest
on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '.github/workflows/TagBot.yml'

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
  test:
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    name: ${{ matrix.package.group }}/${{ matrix.package.repo }}/${{ matrix.julia-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        julia-version: ['1']
        os: [ubuntu-latest]
        package:
          - {repo: LazyBandedMatrices.jl, group: JuliaLinearAlgebra}
          # uncomment when the tests for InfiniteLinearAlgebra.jl are fixed
          # - {repo: InfiniteLinearAlgebra.jl, group: JuliaLinearAlgebra}
          - {repo: QuasiArrays.jl, group: JuliaApproximation}
          - {repo: ContinuumArrays.jl, group: JuliaApproximation}

    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: x64
      - uses: julia-actions/julia-buildpkg@latest
      - name: Clone Downstream
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.package.group }}/${{ matrix.package.repo }}
          path: downstream
      - name: Load this and run the downstream tests
        shell: julia --color=yes --project=downstream {0}
        run: |
          using Pkg
          try
            # force it to use this PR's version of the package
            Pkg.develop(PackageSpec(path="."))  # resolver may fail with main deps
            Pkg.update()
            Pkg.test(; coverage = true)  # resolver may fail with test time deps
          catch err
            err isa Pkg.Resolve.ResolverError || rethrow()
            # If we can't resolve that means this is incompatible by SemVer and this is fine
            # It means we marked this as a breaking change, so we don't need to worry about
            # Mistakenly introducing a breaking change, as we have intentionally made one
            @info "Not compatible with this release. No problem." exception=err
            exit(0)  # Exit immediately, as a success
          end
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info
